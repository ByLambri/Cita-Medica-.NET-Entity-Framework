// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using citamedica;

#nullable disable

namespace citamedica.Migrations
{
    [DbContext(typeof(dbContex))]
    partial class dbContexModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("citamedica.Model.Cita", b =>
                {
                    b.Property<long>("id_cita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id_cita"));

                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("fechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("motivoCita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_cita");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("citas");
                });

            modelBuilder.Entity("citamedica.Model.Diagnostico", b =>
                {
                    b.Property<long>("id_Diagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id_Diagnostico"));

                    b.Property<long>("CitaId")
                        .HasColumnType("bigint");

                    b.Property<string>("enfermedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("valoracionEspecialista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_Diagnostico");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.ToTable("diagnosticos");
                });

            modelBuilder.Entity("citamedica.Model.MedicoPaciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("MedicosPacientes");
                });

            modelBuilder.Entity("citamedica.Model.Usuario", b =>
                {
                    b.Property<long>("Id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id_usuario"));

                    b.Property<string>("apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_usuario");

                    b.ToTable("usuarios");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("citamedica.Model.Medico", b =>
                {
                    b.HasBaseType("citamedica.Model.Usuario");

                    b.Property<string>("numColegiado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("medicos");
                });

            modelBuilder.Entity("citamedica.Model.Paciente", b =>
                {
                    b.HasBaseType("citamedica.Model.Usuario");

                    b.Property<string>("NSS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("pacientes");
                });

            modelBuilder.Entity("citamedica.Model.Cita", b =>
                {
                    b.HasOne("citamedica.Model.Medico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("citamedica.Model.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("citamedica.Model.Diagnostico", b =>
                {
                    b.HasOne("citamedica.Model.Cita", "cita")
                        .WithOne("Diagnostico")
                        .HasForeignKey("citamedica.Model.Diagnostico", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cita");
                });

            modelBuilder.Entity("citamedica.Model.MedicoPaciente", b =>
                {
                    b.HasOne("citamedica.Model.Paciente", "Paciente")
                        .WithMany("Medicos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("citamedica.Model.Medico", "Medico")
                        .WithMany("pacientes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("citamedica.Model.Medico", b =>
                {
                    b.HasOne("citamedica.Model.Usuario", null)
                        .WithOne()
                        .HasForeignKey("citamedica.Model.Medico", "Id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("citamedica.Model.Paciente", b =>
                {
                    b.HasOne("citamedica.Model.Usuario", null)
                        .WithOne()
                        .HasForeignKey("citamedica.Model.Paciente", "Id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("citamedica.Model.Cita", b =>
                {
                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("citamedica.Model.Medico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("pacientes");
                });

            modelBuilder.Entity("citamedica.Model.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Medicos");
                });
#pragma warning restore 612, 618
        }
    }
}
